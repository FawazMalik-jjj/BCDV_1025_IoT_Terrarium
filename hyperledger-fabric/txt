System Setup and installation of  Prerequisites 

Update package lists:
 sudo apt update

Upgrade installed packages: 
sudo apt -y upgrade

Install curl: 
sudo apt install curl

Install git:
 sudo apt install git

Install python:
 sudo apt install python

Install Go and jq: 
Sudo apt-get install jq
Sudo apt-get install golang

Install additional dependencies:
 sudo apt install apt-transport-https ca-certificates gnupg-agent software-properties-common

Install Docker: 
Import Docker's GPG key: 
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
Add Docker repository: 
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
Update package lists: 
sudo apt update

Install Docker: 
sudo apt -y install docker-ce
Add user to the docker group: 
sudo usermod -aG docker <username>
Install Docker Compose:
Download Docker Compose: 
sudo curl -L https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
Set executable permissions: sudo chmod +x /usr/local/bin/docker-compose

Clone Hyperledger Fabric Samples:
Clone the repository: 
git clone https://github.com/hyperledger/fabric-samples.git
Change to the cloned directory: 
cd fabric-samples
Set up the Test Network:
Run the bootstrap script: 
curl -sSL https://raw.githubusercontent.com/hyperledger/fabric/main/scripts/bootstrap.sh | bash -s
Change to the test network directory:
 cd fabric-samples/test-network

Deploy the Chaincode:

Bring down the network:
 ./network.sh down

Bring up the network and create a channel: 
./network.sh up createChannel -ca -s couchdb

Deploy the chaincode: 
./network.sh deployCC -ccn autorium_monitor_ -ccv 1.0 -ccp ../../autorium/autorium_monitor -ccl javascript


The functionality of the Chainccode smart contract:

The code defines a custom contract named MyContract, which extends the Contract class from the fabric-contract-api package.
The initLedger function initializes the ledger with sample device data. It creates and stores device objects with their respective device IDs, owners, and sensor data.

The queryDevice function allows querying for a specific device by its device ID. It retrieves the device's data from the ledger and returns it.

The createDevice function creates a new device by providing a device ID and owner. It creates a device object with empty sensor data and stores it in the ledger.

The recordSensorData function allows recording sensor data for a specific device. It retrieves the device's data from the ledger, appends the new sensor data to the existing data, and updates the ledger with the modified device object.

The getAllDevices function retrieves all devices stored in the ledger. It iterates over the range of keys in the ledger and retrieves each device's data, collecting them into an array. The array of devices is then returned as a JSON string.





peer chaincode invoke \
    -o localhost:7050 \
    --ordererTLSHostnameOverride orderer.example.com \
    --tls --cafile ${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem \
    -C mychannel \
    -n terrariumMonitor \
    --peerAddresses localhost:7051 \
    --tlsRootCertFiles ${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt \
    --peerAddresses localhost:9051 \
    --tlsRootCertFiles ${PWD}/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt \
    -c '{"function":"initAccount","Args":["A1","100"]}'

    peer chaincode query \
    -C mychannel \
    -n terrarium_monitor \
    -c '{"function":"listAccounts", "Args":[]}'
